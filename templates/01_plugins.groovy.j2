import jenkins.*
import jenkins.model.*
import hudson.*
import hudson.model.*
import java.util.logging.LogManager
import static java.util.logging.Level.WARNING
import static java.util.logging.Level.INFO
import jenkins.util.groovy.GroovyHookScript

def instance = Jenkins.getInstance()
def pm = instance.getPluginManager()
def uc = instance.getUpdateCenter()
def logger = LogManager.getLogManager().getLogger("jenkins.util.groovy.GroovyHookScript")
def pluginList = ["{{ jenkins_plugins | join ('","') }}"]
def installedList = []
def dependList = []
def pmTasks = []

uc.updateAllSites()

def checkAreDone(tasks) {
  def retvalue = true
  tasks.each {
    if (!it.isDone()) {
      retvalue = false
    }
  }
  return retvalue
}

def deployPlugin(plugin, dependList) {
  Jenkins.instance.updateCenter.getPlugin(plugin).dependencies.keySet().each {
    if (! (it in dependList)) {
      dependList << it
      deployPlugin(it, dependList)
    }
  }
  if (! (plugin in dependList)) {
      dependList << plugin
  }
}

// Create a list of plugins to install and install them
pluginList.each {
  logger.log(INFO, "Installing plugin: "+it)
  deployPlugin(it, dependList)
  dependList.each {
    pmTasks += uc.getPlugin(it).deploy(true)
  }
  pmTasks += uc.getPlugin(it).deploy(true)
}

// Wait until the plugins are installed
while (!checkAreDone(pmTasks)) {
  sleep(500)
}

// Get all the plugins installed in Jenkins
pm.plugins.each {
  installedList << it.getShortName()
}

// Detect the unused plugins and disable them
def disablePlugins = (installedList - dependList)
disablePlugins.each {pm.getPlugin(it).disable()}
dependList.each {pm.getPlugin(it).enable()}

// Restart jenkins if needed
if (Jenkins.instance.updateCenter.isRestartRequiredForCompletion()) {
  Jenkins.instance.doSafeRestart(null);
}

