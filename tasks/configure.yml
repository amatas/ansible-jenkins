---

# Jenkins comes with bundled plugins that get priority during deployment. This
# means that any newer version of a bundled plugin that gets downloaded to
# ~/plugins will be ignored and replaced with the bundled version the next
# time Jenkins is restarted.
#
# A workaround is to download a newer version and pin it (create a .pinned
# file). In this case Jenkins will not atempt to overwrite the newer version.
#
# Pinning a plugin does not mean that newer versions will get ignored. The
# pluginManager will continue to check for newer version and make them avai-
# lable through the web interface.

- name: Create Jenkins auxiliary directory for holding JARs, scripts, etc
  file:
    path: "{{ jenkins_aux_dir }}"
    state: directory
    owner: root
    group: root

- name: Extract the jenkins_cli jarfile
  command: unzip -oj /usr/lib/jenkins/jenkins.war WEB-INF/jenkins-cli.jar -d /opt/jenkins/

- name: Configure Jenkins startup
  template:
    src: sysconfig.j2
    dest: /etc/sysconfig/jenkins
  when: "{{ not is_docker }}"

- name: Set Wizard flag
  copy:
    dest: /var/lib/jenkins/jenkins.install.UpgradeWizard.state
    src: jenkins.install.UpgradeWizard.state
    owner: "{{ jenkins_user  }}"

- name: Enable and start Jenkins
  service:
    name: jenkins
    state: started
  when: "{{ not is_docker}}"

- name: Start Jenkins (Docker)
  command: >
    su - {{ jenkins_user }}
    -c /bin/java {{ jenkins_java_options }}
    -DJENKINS_HOME={{ jenkins_home }}
    -Djenkins.install.runSetupWizard=false
    -jar /usr/lib/jenkins/jenkins.war
    --webroot=/var/cache/jenkins/war
    --httpPort={{ jenkins_port }}
    --httpListenAddress={{ jenkins_listen_address }}
    --ajp13Port=-1
    --daemon
    --debug={{ jenkins_debug_level }}
    --handlerCountMax={{ jenkins_handler_max }}
    --handlerCountMaxIdle={{ jenkins_handler_idle }}
  when: "{{ is_docker }}"

- name: Waiting for port listening
  wait_for:
    host: "{{ jenkins_listen_address }}"
    port: "{{ jenkins_port }}"

- name: Wait for Jenkins to be ready
  uri:
    url: "http://{{ jenkins_listen_address }}:{{ jenkins_port }}/cli/"
    return_content: yes
    status_code: "200,403,401,503"
  register: result
  until: >
    (result.status == 200) or
    ((result.status == 403) and
    (result.x_required_permission is defined))
  retries: "{{ jenkins_conn_retries }}"
  delay: "{{ jenkins_conn_delay }}"
  changed_when: false

- name: Install and update plugins
  uri:
    url: "{{ jenkins_url }}/scriptText"
    method: POST
    user: "{{ jenkins_deploy_user }}"
    password: "{{ jenkins_deploy_password }}"
    body: "script={{ lookup('template', '{{ item }}.j2') }}"
    force_basic_auth: yes
    status_code: 200
    timeout: 300
    body_format: raw
  with_items:
    - plugin-installer.gv
    - security.gv
    - credentials.gv
    - configuration.gv
    - nodes.gv

- name: Waiting for port listening
  wait_for:
    host: "{{ jenkins_listen_address }}"
    port: "{{ jenkins_port }}"
 
- name: Wait for Jenkins to be ready
  uri:
    url: "http://{{ jenkins_listen_address }}:{{ jenkins_port }}/cli/"
    return_content: yes
    status_code: "200,403,401,503"
  register: result
  until: >
    (result.status == 200) or
    ((result.status == 403) and
    (result.x_required_permission is defined))
  retries: "{{ jenkins_conn_retries }}"
  delay: "{{ jenkins_conn_delay }}"
  changed_when: false
 
- name: Get user token
  uri:
    url: "{{ jenkins_url }}/scriptText"
    method: POST
    user: "{{ jenkins_deploy_user }}"
    password: "{{ jenkins_deploy_password }}"
    body: "script={{ lookup('template', 'get_user_token.gv.j2') }}"
    force_basic_auth: yes
    status_code: 200
    timeout: 300
    body_format: raw
    return_content: yes
  register: std_user_token

- name: Set token fact
  set_fact: jenkins_user_token={{ std_user_token.content | regex_replace('\n', '') }}

- name: Transfer jenkins-jobs configuration
  template:
    src: jenkins_jobs.ini.j2
    dest: "{{ jenkins_home }}/jenkins_jobs.ini"
    owner: "{{ jenkins_user }}"
    mode: 0640

- name: Set slave to master security
  template:
    src: "slave-to-master-security-kill-switch.j2"
    dest: "{{ jenkins_home }}/secrets/slave-to-master-security-kill-switch"
    backup: no
    owner: "{{ jenkins_user }}"

- name: Stop Jenkins (end of configure step)
  service:
    name: jenkins
    state: stopped
  when: "{{ not is_docker }}"

